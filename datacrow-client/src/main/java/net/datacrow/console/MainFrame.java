/****************************************************************************** *                                     __                                     * *                              <-----/@@\----->                              * *                             <-< <  \\//  > >->                             * *                               <-<-\ __ /->->                               * *                               Data /  \ Crow                               * *                                   ^    ^                                   * *                              info@datacrow.net                             * *                                                                            * *                       This file is part of Data Crow.                      * *       Data Crow is free software; you can redistribute it and/or           * *        modify it under the terms of the GNU General Public                 * *       License as published by the Free Software Foundation; either         * *              version 3 of the License, or any later version.               * *                                                                            * *        Data Crow is distributed in the hope that it will be useful,        * *      but WITHOUT ANY WARRANTY; without even the implied warranty of        * *           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.             * *           See the GNU General Public License for more details.             * *                                                                            * *        You should have received a copy of the GNU General Public           * *  License along with this program. If not, see http://www.gnu.org/licenses  * *                                                                            * ******************************************************************************/package net.datacrow.console;import java.awt.Component;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.Insets;import java.util.HashMap;import java.util.Map;import javax.swing.JMenuBar;import javax.swing.SwingUtilities;import net.datacrow.console.components.panels.ModuleListPanel;import net.datacrow.console.components.renderers.DcTableHeaderRenderer;import net.datacrow.console.components.renderers.DcTableHeaderRendererRequired;import net.datacrow.console.components.renderers.DcTableRowIndexCellRenderer;import net.datacrow.console.menu.DcToolBar;import net.datacrow.console.views.MasterView;import net.datacrow.console.windows.DcFrame;import net.datacrow.console.windows.LookAndFeelDialog;import net.datacrow.console.windows.drivemanager.DriveManagerDialog;import net.datacrow.console.windows.log.LogPanel;import net.datacrow.core.DcConfig;import net.datacrow.core.DcRepository;import net.datacrow.core.IconLibrary;import net.datacrow.core.console.IMasterView;import net.datacrow.core.console.IView;import net.datacrow.core.data.DataFilter;import net.datacrow.core.modules.DcModule;import net.datacrow.core.modules.DcModules;import net.datacrow.core.objects.DcLookAndFeel;import net.datacrow.core.plugin.Plugin;import net.datacrow.plugins.PluginHelper;import net.datacrow.settings.DcSettings;import net.datacrow.settings.Settings;import net.datacrow.util.Utilities;import org.apache.log4j.Logger;/** * Main GUI.  *  * @author Robert Jan van der Waals */public class MainFrame extends DcFrame {    private static Logger logger = Logger.getLogger(MainFrame.class.getName());    	private static final long serialVersionUID = 9L;    private ModuleListPanel moduleListPanel = new ModuleListPanel();    private IView currentView;        private DcToolBar toolBar;    private DcModule activeModule = null;    private boolean initialized = false;    private boolean onExitCheckForChanges = true;        private Map<Integer, DcToolBar> toolBars = new HashMap<Integer, DcToolBar>();    public MainFrame() {        super(DcConfig.getInstance().getVersion().getFullString(), IconLibrary._icoMain);    }        public void initialize() {        this.getContentPane().setLayout(Layout.getGBL());                toggleModuleList(DcSettings.getBoolean(DcRepository.Settings.stShowModuleList));        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);        rebuildModuleBar(false);        int moduleIdx = DcModules.getCurrent().getIndex() == DcModules._ITEM ? DcModules._CONTAINER : DcModules.getCurrent().getIndex();        changeModule(moduleIdx);                applySettings(false);                validate();                pack();                setResizable(true);        setSize(DcSettings.getDimension(DcRepository.Settings.stMainViewSize));        registerShortCuts();        if (DcSettings.getDimension(DcRepository.Settings.stMainViewLocation) == null) {            setCenteredLocation();        } else {            Dimension loc = DcSettings.getDimension(DcRepository.Settings.stMainViewLocation);            setLocation(loc.width, loc.height);        }        int viewState = DcSettings.getInt(DcRepository.Settings.stMainViewState);        setExtendedState(viewState);                        initialized = true;    }        public void setOnExitCheckForChanges(boolean b) {        onExitCheckForChanges = b;    }    private void registerShortCuts() {        PluginHelper.registerKey(getRootPane(), "Report");        PluginHelper.registerKey(getRootPane(), "Filter");        PluginHelper.registerKey(getRootPane(), "ApplyFilter");        PluginHelper.registerKey(getRootPane(), "FileImport");        PluginHelper.registerKey(getRootPane(), "Log");        PluginHelper.registerKey(getRootPane(), "Settings");        PluginHelper.registerKey(getRootPane(), "CreateNew");        PluginHelper.registerKey(getRootPane(), "OpenItem");        PluginHelper.registerKey(getRootPane(), "FileLauncher");        PluginHelper.registerKey(getRootPane(), "ResourceEditor");        PluginHelper.registerKey(getRootPane(), "SaveAll");        PluginHelper.registerKey(getRootPane(), "OnlineSearch");        PluginHelper.registerKey(getRootPane(), "NewItemWizard");        PluginHelper.registerKey(getRootPane(), "UndoFilter");                PluginHelper.registerKey(getRootPane(), "ChangeView", MasterView._TABLE_VIEW, -1, Plugin._VIEWTYPE_SEARCH);        PluginHelper.registerKey(getRootPane(), "ChangeView", MasterView._LIST_VIEW, -1, Plugin._VIEWTYPE_SEARCH);//        PluginHelper.registerKey(getRootPane(), "ToggleQuickFilterBar");//        PluginHelper.registerKey(getRootPane(), "ToggleModuleList");        PluginHelper.registerKey(getRootPane(), "ToggleQuickView");        PluginHelper.registerKey(getRootPane(), "ToggleGroupingPane");        for (DcModule module : DcModules.getModules()) {            if (module.isTopModule() && module.getKeyStroke() != null)                PluginHelper.registerKey(getRootPane(), "OpenModule", -1, module.getIndex(), Plugin._VIEWTYPE_SEARCH);        }            }        public DcToolBar getToolBar() {        return toolBar;    }    private void toggleModuleList(boolean enable) {        moduleListPanel.setVisible(enable);    }    public void toggleModuleList() {    	moduleListPanel.setVisible(!moduleListPanel.isVisible());        DcSettings.set(DcRepository.Settings.stShowModuleList, moduleListPanel.isVisible());    }    public void clearQuickFilterBar() {        if (toolBar != null) {            toolBar.clearFilter();        }    }        public void rebuildToolBar(boolean reset) {        if (reset) {            toolBars.remove(Integer.valueOf(activeModule.getIndex()));        }                if (toolBar != null)             getContentPane().remove(toolBar);                toolBar = toolBars.get(Integer.valueOf(activeModule.getIndex()));        toolBar = toolBar == null ? new DcToolBar(activeModule) : toolBar;                toolBars.put(Integer.valueOf(activeModule.getIndex()), toolBar);                toolBar.setVisible(DcSettings.getBoolean(DcRepository.Settings.stShowToolbar));        getContentPane().add(toolBar, Layout.getGBC( 0, 1, 1, 1, 0.0, 0.0                ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,                 new Insets(0, 0, 0, 0), 0, 0));                repaint();        revalidate();    }        public void rebuildMenuBar() {        JMenuBar menubar = getJMenuBar();        ComponentFactory.clean(menubar);        setJMenuBar(null);                getRootPane().setJMenuBar(GUI.getInstance().getMenuBar(activeModule));        repaint();        validate();    }        private void rebuildModuleBar(boolean rebuild) {        getContentPane().add(moduleListPanel, Layout.getGBC( 0, 0, 1, 1, 1.0, 1.0                ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,                 new Insets(0, 0, 0, 0), 0, 0));        moduleListPanel.setVisible(DcSettings.getBoolean(DcRepository.Settings.stShowModuleList));                    if (rebuild) {            moduleListPanel.rebuild();            moduleListPanel.revalidate();        }    }    public void applySettings(boolean refreshView) {                Font fontNormal = DcSettings.getFont(DcRepository.Settings.stSystemFontNormal);        Font fontSystem = DcSettings.getFont(DcRepository.Settings.stSystemFontBold);                // apply module specific settings        GUI.getInstance().applySettings();        rebuildToolBar(true);        rebuildMenuBar();                if (moduleListPanel != null) {            moduleListPanel.setFont(fontNormal);            rebuildModuleBar(true);        }                LogPanel.getInstance().setFont(fontNormal);        DriveManagerDialog.getInstance().setFont(fontNormal);        if (currentView != null)            currentView.applySettings();        DcTableHeaderRenderer.getInstance().applySettings();        DcTableHeaderRendererRequired.getInstance().applySettings();        DcTableRowIndexCellRenderer.getInstance().applySettings();                if (toolBar != null) {            toolBar.setFloatable(false);            toolBar.setFont(fontSystem);        }                if (getJMenuBar() != null)            getJMenuBar().setFont(fontSystem);                if (currentView != null && refreshView) {            GUI.getInstance().getSearchView(activeModule.getIndex()).refresh();        }    }            public void updateLAF(final DcLookAndFeel laf) {        try {            DcSettings.set(DcRepository.Settings.stLookAndFeel, laf);                        ComponentFactory.setLookAndFeel();                        SwingUtilities.updateComponentTreeUI(moduleListPanel);            SwingUtilities.updateComponentTreeUI(toolBar);                SwingUtilities.updateComponentTreeUI(LogPanel.getInstance());            SwingUtilities.updateComponentTreeUI(DriveManagerDialog.getInstance().getContentPane());            SwingUtilities.updateComponentTreeUI(getContentPane());            SwingUtilities.updateComponentTreeUI(DcTableHeaderRenderer.getInstance().getButton());            SwingUtilities.updateComponentTreeUI(DcTableHeaderRendererRequired.getInstance().getButton());            SwingUtilities.updateComponentTreeUI(DcTableRowIndexCellRenderer.getInstance().getButton());            if (getJMenuBar() != null)                SwingUtilities.updateComponentTreeUI(getJMenuBar());                        try {                if (currentView != null)                    remove((Component) currentView);                                super.close();            } catch (Exception e) {                setVisible(false);            }                        MainFrame mf = new MainFrame();            mf.initialize();            mf.setVisible(true);            GUI.getInstance().setMainFrame(mf);                        new LookAndFeelDialog().setVisible(true);                    } catch (Exception e) {            logger.error(e, e);        }    }            private void installView(IView view) {        if (currentView != null)            getContentPane().remove((Component) currentView);                currentView = view;        getContentPane().add((Component) currentView, Layout.getGBC( 0, 2, 1, 1, 1000.0, 1000.0                ,GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH,                new Insets(0, 0, 0, 0), 0, 0));                view.activate();    }        public void applyView(int newView) {        Settings settings = DcModules.getCurrent().getSettings();        GUI gui = GUI.getInstance();                IMasterView searchView = gui.getSearchView(activeModule.getIndex());                searchView.getCurrent().saveSettings();        settings.set(DcRepository.ModuleSettings.stDefaultSearchView, newView);                IView view = searchView.getCurrent();        installView(view);        load();        setHelpIndex(view.getHelpIndex());        searchView.applySettings();    }        public void load() {                if (!initialized) return;        if (activeModule == null) return;        if (!isVisible()) return;                GUI gui = GUI.getInstance();                 int moduleIdx = activeModule.getIndex();        IMasterView searchView = gui.getSearchView(moduleIdx);        if (searchView == null ||            searchView.isLoaded()) return;                searchView.add(DcConfig.getInstance().getConnector().getKeys(new DataFilter(moduleIdx)));    }        public void changeModule(final int index) {                if (currentView != null)            currentView.deactivate();                activeModule = DcModules.get(index);        activeModule = activeModule == null ? DcModules.get(DcModules._SOFTWARE) : activeModule;        activeModule = activeModule == null ? DcModules.get(DcModules._USER) : activeModule;                while (!activeModule.isEnabled()) {        	for (DcModule m : DcModules.getModules()) {        		if (m.isTopModule() && m.isEnabled()) {        			activeModule = m;        			break;        		}        	}        }                DcSettings.set(DcRepository.Settings.stModule, activeModule.getIndex());                        rebuildMenuBar();        rebuildToolBar(false);        repaint();                // apply the default view for the selected module        applyView(activeModule.getSettings().getInt(DcRepository.ModuleSettings.stDefaultSearchView));    }        @Override    protected void setCenteredLocation() {        setLocation(Utilities.getCenteredWindowLocation(getSize(), true));    }    /**     * Closes this frame and closed the application.     * The behavior of this method is influences by the check for changes local setting     * and the save settings local setting.     * @see #onExitCheckForChanges     * @see #onExitSaveSettings      */    @Override    public void close() {                DcSettings.set(DcRepository.Settings.stGracefulShutdown, Boolean.TRUE);        DcSettings.set(DcRepository.Settings.stMainViewSize, getSize());        DcSettings.set(DcRepository.Settings.stMainViewState, getExtendedState());        DcSettings.set(DcRepository.Settings.stMainViewLocation, new Dimension(getLocation().x, getLocation().y));                DcConfig.getInstance().getConnector().shutdown(onExitCheckForChanges);    }}